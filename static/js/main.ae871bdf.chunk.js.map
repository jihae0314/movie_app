{"version":3,"sources":["Moive.js","App.js","serviceWorker.js","index.js"],"names":["Moivs","className","MoviePoster","poster","this","props","alt","title","genres","map","index","MovieGenres","key","text","synopsis","maxLine","ellipsis","trimRight","basedOn","Component","src","prototype","PropTypes","string","isRequired","App","state","_renderMovies","movies","movie","console","log","title_english","medium_cover_image","id","_getMovies","a","_callApi","setState","fetch","then","potato","json","data","catch","err","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2WAIMA,E,iLAQE,OACI,yBAAKC,UAAU,SACX,yBAAKA,UAAU,kBACX,kBAACC,EAAD,CAAaC,OAAQC,KAAKC,MAAMF,OAAQG,IAAKF,KAAKC,MAAME,SAE5D,yBAAKN,UAAU,kBACX,4BAAKG,KAAKC,MAAME,OAChB,yBAAKN,UAAU,gBACVG,KAAKC,MAAMG,OAAOC,IAAI,SAACD,EAAQE,GAAT,OAAmB,kBAACC,EAAD,CAAaH,OAAQA,EAAQI,IAAKF,OAEhF,uBAAGT,UAAU,mBACT,kBAAC,IAAD,CACIY,KAAMT,KAAKC,MAAMS,SACjBC,QAAQ,IACRC,SAAW,MACXC,WAAS,EACTC,QAAQ,mB,GAxBhBC,aAkCpB,SAASR,EAAT,GAA+B,IAATH,EAAQ,EAARA,OAClB,OACI,0BAAMP,UAAU,eAAeO,EAA/B,MAGR,SAASN,EAAT,GAAoC,IAAdC,EAAa,EAAbA,OAAQG,EAAK,EAALA,IAC1B,OACI,yBAAKc,IAAKjB,EAAQG,IAAKA,EAAKC,MAAOD,EAAKL,UAAU,kBAI1DC,EAAYmB,UAAY,CACpBlB,OAAQmB,IAAUC,OAAOC,WACzBlB,IAAIgB,IAAUC,OAAOC,YAEzBb,EAAYU,UAAW,CACnBb,OAASc,IAAUC,OAAOC,YAIfxB,QC8BAyB,E,2MAlFbC,MAAQ,G,EAiCRC,cAAgB,WAYd,OAXe,EAAKD,MAAME,OAAOnB,IAAI,SAAAoB,GAEnC,OADAC,QAAQC,IAAIF,GACL,kBAAC,EAAD,CAAOtB,MAAOsB,EAAMG,cAC3B7B,OAAQ0B,EAAMI,mBACdrB,IAAKiB,EAAMK,GACX1B,OAAQqB,EAAMrB,OACdM,SAAUe,EAAMf,c,EAQrBqB,W,qBAAc,4BAAAC,EAAA,qEACU,EAAKC,WADf,OACLT,EADK,OAGX,EAAKU,SAAS,CACZV,WAJS,yC,EASbS,SAAW,WACT,OAAOE,MAAM,iEACZC,KAAK,SAAAC,GAAM,OAAIA,EAAOC,SAEtBF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKf,SACvBgB,MAAM,SAAAC,GAAG,OAAIf,QAAQC,IAAIc,M,mFA5D1BzC,KAAK+B,e,+BAmEE,IACAP,EAAUxB,KAAKsB,MAAfE,OACP,OACE,yBAAK3B,UAAW2B,EAAS,MAAM,gBAC5BA,EAASxB,KAAKuB,gBAAgB,iB,GA1ErBmB,IAAM3B,WCOJ4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,KAAK,SAAAmB,GACjCA,EAAaC,iB","file":"static/js/main.ae871bdf.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Moive.css';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\nclass Moivs extends Component{\r\n    static propTypes = {\r\n        title : PropTypes.string.isRequired,\r\n        poster :PropTypes.string.isRequired,\r\n        genres: PropTypes.array.isRequired,\r\n        synopsis: PropTypes.string.isRequired\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"Movie\">\r\n                <div className=\"Movie__Columns\">\r\n                    <MoviePoster poster={this.props.poster} alt={this.props.title}/>\r\n                </div>\r\n                <div className=\"Movie__Columns\">\r\n                    <h1>{this.props.title}</h1>\r\n                    <div className=\"Movie_Genres\">\r\n                        {this.props.genres.map((genres, index) => <MovieGenres genres={genres} key={index}></MovieGenres>)}\r\n                    </div>\r\n                    <p className=\"Movie__Synopsis\">\r\n                        <LinesEllipsis\r\n                            text={this.props.synopsis}\r\n                            maxLine='3'\r\n                            ellipsis = '...'\r\n                            trimRight\r\n                            basedOn='letters'\r\n                        ></LinesEllipsis>\r\n                    </p>\r\n                </div>\r\n                \r\n            </div>\r\n        \r\n        )\r\n    }\r\n}\r\nfunction MovieGenres({genres}){\r\n    return(\r\n        <span className=\"Movie_Genre\">{genres}  </span>\r\n    )\r\n}\r\nfunction MoviePoster({poster, alt}){ //인자를 받아옴 App에서 포스터의 인자값을 받음\r\n    return(\r\n        <img src={poster} alt={alt} title={alt} className=\"Movie__poster\"/>\r\n        //this.props.poster가 아니라 그냥 poster 왜냐면 이제 이건 컴포넌트가 아니라 함수 인자이기때문\r\n        )\r\n}\r\nMoviePoster.prototype = {\r\n    poster: PropTypes.string.isRequired,\r\n    alt:PropTypes.string.isRequired\r\n}\r\nMovieGenres.prototype ={\r\n    genres : PropTypes.string.isRequired\r\n\r\n}\r\n\r\nexport default Moivs;\r\n// funtion 과 Component는 다름! Component는 state와 props를 가짐 하지만 funtion은 걍 함수이기때문에 둘을가질수 없음","import React from 'react';\nimport './App.css';\nimport Moive from './Moive';\n\n\nclass App extends React.Component{\n  state = {}\n  componentDidMount(){\n    this._getMovies()\n\n    /*setTimeout(()=>{\n      this.setState({\n        Movies :[\n          {\n            title:\"Spider-Man\",\n            poster:\"http://image.cine21.com/resize/cine21/poster/2019/0723/12_29_23__5d367f132826a[W680-].jpg\"\n            \n          },\n          {\n             title:\"Showtimes for Avengers: Endgame\",\n             poster:\"https://t1.daumcdn.net/liveboard/feelthemovie/873a9fd390114677a4e8ffddba7957ca.JPG\"\n          },\n          {\n            title:\"The Maze Runner\",\n            poster:\"http://mblogthumb2.phinf.naver.net/MjAxODA3MjlfMjk4/MDAxNTMyODczODA5OTM3.SK-a1NKH4M1Fce74k7IL6eqfU_ym_hcMjUpad2ubv0sg.MqLK54_bj3j7mdZcRB4Fb0O2oZk5TndTgdY7FnOM7aMg.PNG.avnet75/1.png?type=w800\"\n          },\n          {\n            title:\"Roar to Victory\",\n            poster:\"http://asianwiki.com/images/e/ec/The_Battle-_Roar_to_Victory-tp1.jpg\"\n          },\n          {\n            title:\"Iron Man\",\n            poster:'https://t1.daumcdn.net/cfile/tistory/245A8450573BCC8B2E'\n          }\n        ]\n      })\n    },5000)*/\n\n  }\n  _renderMovies = ()=>{\n    const _movie = this.state.movies.map(movie=>{\n      console.log(movie)\n      return <Moive title={movie.title_english} \n      poster={movie.medium_cover_image} \n      key={movie.id} \n      genres={movie.genres}\n      synopsis={movie.synopsis}\n      >\n\n      </Moive>//타이틀과 포스터의 인자값을 넘겨줌 import Moive from './Moive';\n    })\n    return _movie\n  }\n\n _getMovies =  async ()=>{\n    const movies = await this._callApi() // await은 n_callApi가 끝나기를 기다리는 것 성공적인 수행이 아니라\n    //callApi의 리턴 값을 movies에 넣는다 이때 await를 사용하면 이 callApi가 모두 끝날때까지(반복이든 뭐든) setState는 실행되지 않아 즉, 정보들 다받고 한번에 set시키는거지\n    this.setState({\n      movies\n    })\n    \n  }\n\n  _callApi = ()=>{\n    return fetch('https://yts.lt/api/v2/list_movies.json?sort_by=download_count') //url로 ajax를 불러올수 있어서 fetch가 좋음\n    .then(potato => potato.json()) // 패치로 받은 바이너리 오브젝트를 제이슨으로 변경해줌\n    //위의 라인이 끝나면 성공이고 뭐고 끝나면 실행 그리고 위의 패치의 결과물 오브젝트를 어트리뷰트로 받는다.\n    .then(json => json.data.movies) //=>에 return이 포함됨 여기잇는 moives가 위에 state에 들감\n    .catch(err => console.log(err))//fetch에서 오류가 나면 잡아서 보여줘\n    /*이전에는 funtion(err){\n      console.log(err)\n    } 를 사용\n*/\n  }\n\n  render(){\n    const {movies} = this.state;\n    return (\n      <div className={movies ? \"App\":\"App--loading\"}>\n        {movies ? this._renderMovies():\"Loading..\"}\n      </div>\n    );\n  }\n}\n    \n \n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}